// AUTOGENERATED FILE - any manual changes will be lost

import { ApiServiceBase, ApiServiceOptions } from './base';

declare global {

    namespace HarmonyTests {

        interface FooResult {
            q1: string;
            q2: boolean;
            r1: number;
            r2: string;
        }

        type TestEnum = "Blah" | "Foo";

    }

}

export class Services {
    public readonly BasicStrict: BasicStrictService;

    public constructor(options?: ApiServiceOptions) {
        this.BasicStrict = new BasicStrictService(options);
    }
}

export class BasicStrictService extends ApiServiceBase {

    public endpoints = {
        BodyArray: (q1: string, qa: string[]): string => `barr?q1=${encodeURIComponent('' + q1)}`,
        GetBinary: (): string => `getbinary`,
        GetEnum: (): string => `getenum`,
        GetInt: (): string => `getint`,
        GetInt0: (): string => `getint0`,
        GetModel: (): string => `getmodel`,
        GetModelArr: (): string => `getmodelarr`,
        GetModelArr0: (): string => `getmodelarr0`,
        GetString: (): string => `getstring`,
        GetString0: (): string => `getstring0`,
        ModelBody: (foo: HarmonyTests.FooResult): string => `modelbody`,
        ModelQuery: (foo: HarmonyTests.FooResult): string => `modelquery?foo=${encodeURIComponent('' + foo)}`,
        Overloaded1_1: (p1: string): string => `overloaded1a?p1=${encodeURIComponent('' + p1)}`,
        Overloaded1_2: (p1: string, p2: number): string => `overloaded1b?p1=${encodeURIComponent('' + p1)}&p2=${encodeURIComponent('' + p2)}`,
        QueryAndRoute: (q1: string, r1: number, q2: boolean, r2: string): string => `qandr/${encodeURIComponent('' + r1)}/foo/${encodeURIComponent('' + r2)}/bar?q1=${encodeURIComponent('' + q1)}&q2=${encodeURIComponent('' + q2)}`,
        QueryArray: (q1: string, qa: string[]): string => `qarr?q1=${encodeURIComponent('' + q1)}&qa=${encodeURIComponent('' + qa)}`,
        QueryOnly: (q1: string, q2: boolean): string => `BasicStrict/qonly?q1=${encodeURIComponent('' + q1)}&q2=${encodeURIComponent('' + q2)}`,
        QueryRouteBody: (q1: string, r1: number, q2: boolean, r2: string): string => `qandrandb/${encodeURIComponent('' + r2)}?q1=${encodeURIComponent('' + q1)}&q2=${encodeURIComponent('' + q2)}`,
        SameName1Get: (): string => `samename`,
        SameName2Post: (): string => `samename`,
    };

    public constructor(options?: ApiServiceOptions) {
        super(options);

        this.BodyArray = this.BodyArray.bind(this);
        this.GetBinary = this.GetBinary.bind(this);
        this.GetEnum = this.GetEnum.bind(this);
        this.GetInt = this.GetInt.bind(this);
        this.GetInt0 = this.GetInt0.bind(this);
        this.GetModel = this.GetModel.bind(this);
        this.GetModelArr = this.GetModelArr.bind(this);
        this.GetModelArr0 = this.GetModelArr0.bind(this);
        this.GetString = this.GetString.bind(this);
        this.GetString0 = this.GetString0.bind(this);
        this.ModelBody = this.ModelBody.bind(this);
        this.ModelQuery = this.ModelQuery.bind(this);
        this.Overloaded1_1 = this.Overloaded1_1.bind(this);
        this.Overloaded1_2 = this.Overloaded1_2.bind(this);
        this.QueryAndRoute = this.QueryAndRoute.bind(this);
        this.QueryArray = this.QueryArray.bind(this);
        this.QueryOnly = this.QueryOnly.bind(this);
        this.QueryRouteBody = this.QueryRouteBody.bind(this);
        this.SameName1Get = this.SameName1Get.bind(this);
        this.SameName2Post = this.SameName2Post.bind(this);
    }

    public BodyArray(q1: string, qa: string[]): Promise<string[]> {
        let url = this.endpoints.BodyArray(q1, qa);
        return this.GET<string[]>(url, { body: JSON.stringify(qa), headers: { 'Content-Type': 'application/json' } });
    }

    public GetBinary(): Promise<any> {
        let url = this.endpoints.GetBinary();
        return this.GET<any>(url);
    }

    public GetEnum(): Promise<HarmonyTests.TestEnum> {
        let url = this.endpoints.GetEnum();
        return this.GET<HarmonyTests.TestEnum>(url);
    }

    public GetInt(): Promise<number> {
        let url = this.endpoints.GetInt();
        return this.GET<number>(url);
    }

    public GetInt0(): Promise<number> {
        let url = this.endpoints.GetInt0();
        return this.GET<number>(url);
    }

    public GetModel(): Promise<HarmonyTests.FooResult> {
        let url = this.endpoints.GetModel();
        return this.GET<HarmonyTests.FooResult>(url);
    }

    public GetModelArr(): Promise<HarmonyTests.FooResult[]> {
        let url = this.endpoints.GetModelArr();
        return this.GET<HarmonyTests.FooResult[]>(url);
    }

    public GetModelArr0(): Promise<HarmonyTests.FooResult[]> {
        let url = this.endpoints.GetModelArr0();
        return this.GET<HarmonyTests.FooResult[]>(url);
    }

    public GetString(): Promise<string> {
        let url = this.endpoints.GetString();
        return this.GET<string>(url);
    }

    public GetString0(): Promise<string> {
        let url = this.endpoints.GetString0();
        return this.GET<string>(url);
    }

    public ModelBody(foo: HarmonyTests.FooResult): Promise<HarmonyTests.FooResult> {
        let url = this.endpoints.ModelBody(foo);
        return this.POST<HarmonyTests.FooResult>(url, { body: JSON.stringify(foo), headers: { 'Content-Type': 'application/json' } });
    }

    public ModelQuery(foo: HarmonyTests.FooResult): Promise<HarmonyTests.FooResult> {
        let url = this.endpoints.ModelQuery(foo);
        return this.POST<HarmonyTests.FooResult>(url);
    }

    public Overloaded1_1(p1: string): Promise<string> {
        let url = this.endpoints.Overloaded1_1(p1);
        return this.GET<string>(url);
    }

    public Overloaded1_2(p1: string, p2: number): Promise<string> {
        let url = this.endpoints.Overloaded1_2(p1, p2);
        return this.GET<string>(url);
    }

    public QueryAndRoute(q1: string, r1: number, q2: boolean, r2: string): Promise<HarmonyTests.FooResult> {
        let url = this.endpoints.QueryAndRoute(q1, r1, q2, r2);
        return this.GET<HarmonyTests.FooResult>(url);
    }

    public QueryArray(q1: string, qa: string[]): Promise<string[]> {
        let url = this.endpoints.QueryArray(q1, qa);
        return this.GET<string[]>(url);
    }

    public QueryOnly(q1: string, q2: boolean): Promise<HarmonyTests.FooResult> {
        let url = this.endpoints.QueryOnly(q1, q2);
        return this.GET<HarmonyTests.FooResult>(url);
    }

    public QueryRouteBody(q1: string, r1: number, q2: boolean, r2: string): Promise<HarmonyTests.FooResult> {
        let url = this.endpoints.QueryRouteBody(q1, r1, q2, r2);
        return this.GET<HarmonyTests.FooResult>(url, { body: JSON.stringify(r1), headers: { 'Content-Type': 'application/json' } });
    }

    public SameName1Get(): Promise<string> {
        let url = this.endpoints.SameName1Get();
        return this.GET<string>(url);
    }

    public SameName2Post(): Promise<string> {
        let url = this.endpoints.SameName2Post();
        return this.POST<string>(url);
    }

}

